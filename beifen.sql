/*M!999999\- enable the sandbox mode */ 
-- MariaDB dump 10.19  Distrib 10.11.11-MariaDB, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: oj
-- ------------------------------------------------------
-- Server version	10.11.11-MariaDB-0ubuntu0.24.04.2

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `oj_questios`
--

DROP TABLE IF EXISTS `oj_questios`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8mb4 */;
CREATE TABLE `oj_questios` (
  `number` int(11) NOT NULL AUTO_INCREMENT COMMENT '题目编号',
  `title` varchar(128) NOT NULL COMMENT '题目标题',
  `star` varchar(8) NOT NULL COMMENT '题目难度',
  `desc` text NOT NULL COMMENT '题目描述',
  `header` text NOT NULL COMMENT '预设代码',
  `tail` text NOT NULL COMMENT '对应题目测试用例',
  `test` text NOT NULL COMMENT '对应题目判题代码',
  `cpu_limit` int(11) DEFAULT 1 COMMENT '对应题目时间限制',
  `mem_limit` int(11) DEFAULT 2560000 COMMENT '对应题目内存限制',
  PRIMARY KEY (`number`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb3 COLLATE=utf8mb3_general_ci;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `oj_questios`
--

LOCK TABLES `oj_questios` WRITE;
/*!40000 ALTER TABLE `oj_questios` DISABLE KEYS */;
INSERT INTO `oj_questios` VALUES
(1,'求最大值','easy','给定一个数组， 返回数组中最大值\n\n输入：{1, 2, 3, 4, 5} 输出：5\n\n输入：{1, 2, 3, 4, 6} 输出：6','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int Max(const vector<int>& nums) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Max({1, 2, 3, 4, 5});\n    if (ret == 5) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Max({1, 2, 3, 4, 6});\n    if (ret == 6) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Max({1, 2, 3, 4, 5});\n    std::cout << ret << std::endl;\n\n    if (ret != 5) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Max({1, 2, 3, 4, 6});\n    std::cout << ret << std::endl;\n\n    if (ret != 6) {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    int ret = Solution().Max({1, 2, 3, 4, 6, 7, 8, 9, 100});\n    std::cout << ret << std::endl;\n\n    if (ret != 100) {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(2,'数组求和','easy','给定一个整数数组，返回数组中所有元素的和\n\n输入：{1, 2, 3, 4, 5} 输出：15\n\n输入：{10, 20, 30} 输出：60','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int Sum(const vector<int>& nums) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Sum({1, 2, 3, 4, 5});\n    if (ret == 15) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Sum({10, 20, 30});\n    if (ret == 60) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Sum({1, 2, 3, 4, 5});\n    std::cout << ret << std::endl;\n\n    if (ret != 15) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Sum({10, 20, 30});\n    std::cout << ret << std::endl;\n\n    if (ret != 60) {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    int ret = Solution().Sum({-1, 0, 1});\n    std::cout << ret << std::endl;\n\n    if (ret != 0) {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(3,'字符串反转','easy','给定一个字符串，返回反转后的字符串\n\n输入：\"hello\" 输出：\"olleh\"\n\n输入：\"world\" 输出：\"dlrow\"','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string Reverse(const string& str) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    string ret = Solution().Reverse(\"hello\");\n    if (ret == \"olleh\") {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    string ret = Solution().Reverse(\"world\");\n    if (ret == \"dlrow\") {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    string ret = Solution().Reverse(\"hello\");\n    std::cout << ret << std::endl;\n\n    if (ret != \"olleh\") {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    string ret = Solution().Reverse(\"world\");\n    std::cout << ret << std::endl;\n\n    if (ret != \"dlrow\") {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    string ret = Solution().Reverse(\"a\");\n    std::cout << ret << std::endl;\n\n    if (ret != \"a\") {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(4,'斐波那契数列','medium','给定一个整数n，返回斐波那契数列的第n项\n斐波那契数列：F(0) = 0, F(1) = 1, F(n) = F(n-1) + F(n-2)\n\n输入：5 输出：5\n输入：6 输出：8','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int Fibonacci(int n) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Fibonacci(5);\n    if (ret == 5) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Fibonacci(6);\n    if (ret == 8) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().Fibonacci(5);\n    std::cout << ret << std::endl;\n\n    if (ret != 5) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().Fibonacci(6);\n    std::cout << ret << std::endl;\n\n    if (ret != 8) {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    int ret = Solution().Fibonacci(10);\n    std::cout << ret << std::endl;\n\n    if (ret != 55) {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(5,'判断回文数','easy','给定一个整数，判断它是否是回文数。回文数是指正序和倒序读都一样的数字\n\n输入：121 输出：true\n输入：-121 输出：false\n输入：10 输出：false','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool IsPalindrome(int x) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    bool ret = Solution().IsPalindrome(121);\n    if (ret == true) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    bool ret = Solution().IsPalindrome(-121);\n    if (ret == false) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    bool ret = Solution().IsPalindrome(121);\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    bool ret = Solution().IsPalindrome(-121);\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    bool ret = Solution().IsPalindrome(12321);\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(6,'两数之和','medium','给定一个整数数组和一个目标值，找出数组中两个数的和等于目标值，返回它们的下标\n假设每个输入只有一个解，且不能使用同一个元素两次\n\n输入：nums = [2,7,11,15], target = 9 输出：[0,1]\n输入：nums = [3,2,4], target = 6 输出：[1,2]','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> TwoSum(const vector<int>& nums, int target) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    vector<int> ret = Solution().TwoSum({2,7,11,15}, 9);\n    if (ret.size() == 2 && ret[0] == 0 && ret[1] == 1) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    vector<int> ret = Solution().TwoSum({3,2,4}, 6);\n    if (ret.size() == 2 && ret[0] == 1 && ret[1] == 2) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\n\n\nint main() {\n    Test1();\n    Test2();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    vector<int> ret = Solution().TwoSum({2,7,11,15}, 9);\n    for (int i : ret) std::cout << i << \" \";\n    std::cout << std::endl;\n\n    if (ret != vector<int>{0, 1}) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    vector<int> ret = Solution().TwoSum({3,2,4}, 6);\n    for (int i : ret) std::cout << i << \" \";\n    std::cout << std::endl;\n\n    if (ret != vector<int>{1, 2}) {\n        exit(-5);\n    }\n\n}\n\nvoid Test3() {\n    vector<int> ret = Solution().TwoSum({3,3}, 6);\n    for (int i : ret) std::cout << i << \" \";\n    std::cout << std::endl;\n\n    if (ret != vector<int>{0, 1}) {\n        exit(-5);\n    }\n\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    return 0;\n}',1,256000),
(7,'寻找数组中心下标','medium','给定一个整数数组，找到中心下标，使得左侧所有元素和等于右侧所有元素和\n如果不存在中心下标返回-1，如果存在多个返回最左边一个\n\n输入：[1, 7, 3, 6, 5, 6] 输出：3\n输入：[1, 2, 3] 输出：-1\n输入：[2, 1, -1] 输出：0','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int PivotIndex(const vector<int>& nums) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().PivotIndex({1, 7, 3, 6, 5, 6});\n    if (ret == 3) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().PivotIndex({1, 2, 3});\n    if (ret == -1) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test3() {\n    int ret = Solution().PivotIndex({2, 1, -1});\n    if (ret == 0) {\n        std::cout << \"通过用例3通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试3不通过 ...Failed!\" << std::endl;\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    int ret = Solution().PivotIndex({1, 7, 3, 6, 5, 6});\n    std::cout << ret << std::endl;\n\n    if (ret != 3) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    int ret = Solution().PivotIndex({1, 2, 3});\n    std::cout << ret << std::endl;\n\n    if (ret != -1) {\n        exit(-5);\n    }\n}\n\nvoid Test3() {\n    int ret = Solution().PivotIndex({2, 1, -1});\n    std::cout << ret << std::endl;\n\n    if (ret != 0) {\n        exit(-5);\n    }\n}\n\nvoid Test4() {\n    int ret = Solution().PivotIndex({1, 1, 1, 1, 1, 1});\n    std::cout << ret << std::endl;\n\n    if (ret != 2 && ret != 3) {\n        exit(-5);\n    }\n}\n\nvoid Test5() {\n    int ret = Solution().PivotIndex({-1, -1, -1, -1, -1, 0});\n    std::cout << ret << std::endl;\n\n    if (ret != 2) {\n        exit(-5);\n    }\n}\n\nvoid Test6() {\n    int ret = Solution().PivotIndex({1});\n    std::cout << ret << std::endl;\n\n    if (ret != 0) {\n        exit(-5);\n    }\n}\n\nvoid Test7() {\n    int ret = Solution().PivotIndex({});\n    std::cout << ret << std::endl;\n\n    if (ret != -1) {\n        exit(-5);\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    Test4();\n    Test5();\n    Test6();\n    Test7();\n    return 0;\n}',1,256000),
(8,'最长公共前缀','easy','编写一个函数来查找字符串数组中的最长公共前缀\n如果不存在公共前缀，返回空字符串 \"\"\n\n输入：[\"flower\",\"flow\",\"flight\"] 输出：\"fl\"\n输入：[\"dog\",\"racecar\",\"car\"] 输出：\"\"','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    string LongestCommonPrefix(const vector<string>& strs) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    string ret = Solution().LongestCommonPrefix({\"flower\",\"flow\",\"flight\"});\n    if (ret == \"fl\") {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    string ret = Solution().LongestCommonPrefix({\"dog\",\"racecar\",\"car\"});\n    if (ret == \"\") {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test3() {\n    string ret = Solution().LongestCommonPrefix({\"apple\",\"app\",\"application\"});\n    if (ret == \"app\") {\n        std::cout << \"通过用例3通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试3不通过 ...Failed!\" << std::endl;\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    string ret = Solution().LongestCommonPrefix({\"flower\",\"flow\",\"flight\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"fl\") {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    string ret = Solution().LongestCommonPrefix({\"dog\",\"racecar\",\"car\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"\") {\n        exit(-5);\n    }\n}\n\nvoid Test3() {\n    string ret = Solution().LongestCommonPrefix({\"apple\",\"app\",\"application\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"app\") {\n        exit(-5);\n    }\n}\n\nvoid Test4() {\n    string ret = Solution().LongestCommonPrefix({\"a\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"a\") {\n        exit(-5);\n    }\n}\n\nvoid Test5() {\n    string ret = Solution().LongestCommonPrefix({\"\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"\") {\n        exit(-5);\n    }\n}\n\nvoid Test6() {\n    string ret = Solution().LongestCommonPrefix({\"\", \"a\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"\") {\n        exit(-5);\n    }\n}\n\nvoid Test7() {\n    string ret = Solution().LongestCommonPrefix({\"same\",\"same\",\"same\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"same\") {\n        exit(-5);\n    }\n}\n\nvoid Test8() {\n    string ret = Solution().LongestCommonPrefix({\"abc\",\"abcd\",\"ab\"});\n    std::cout << ret << std::endl;\n\n    if (ret != \"ab\") {\n        exit(-5);\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    Test4();\n    Test5();\n    Test6();\n    Test7();\n    Test8();\n    return 0;\n}',1,256000),
(9,'有效的括号','easy','给定一个只包括 \'(\', \')\', \'{\', \'}\', \'[\', \']\' 的字符串，判断字符串是否有效\n有效字符串需满足：\n1. 左括号必须用相同类型的右括号闭合\n2. 左括号必须以正确的顺序闭合\n3. 每个右括号都有一个对应的相同类型的左括号\n\n输入：\"()\" 输出：true\n输入：\"()[]{}\" 输出：true\n输入：\"(]\" 输出：false','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool IsValid(const string& s) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    bool ret = Solution().IsValid(\"()\");\n    if (ret == true) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    bool ret = Solution().IsValid(\"()[]{}\");\n    if (ret == true) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test3() {\n    bool ret = Solution().IsValid(\"(]\");\n    if (ret == false) {\n        std::cout << \"通过用例3通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试3不通过 ...Failed!\" << std::endl;\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    bool ret = Solution().IsValid(\"()\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    bool ret = Solution().IsValid(\"()[]{}\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test3() {\n    bool ret = Solution().IsValid(\"(]\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n}\n\nvoid Test4() {\n    bool ret = Solution().IsValid(\"([)]\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n}\n\nvoid Test5() {\n    bool ret = Solution().IsValid(\"{[]}\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test6() {\n    bool ret = Solution().IsValid(\"\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test7() {\n    bool ret = Solution().IsValid(\"(((\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n}\n\nvoid Test8() {\n    bool ret = Solution().IsValid(\")))\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n}\n\nvoid Test9() {\n    bool ret = Solution().IsValid(\"([{}])\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (!ret) {\n        exit(-5);\n    }\n}\n\nvoid Test10() {\n    bool ret = Solution().IsValid(\"[(])\");\n    std::cout << (ret ? \"true\" : \"false\") << std::endl;\n\n    if (ret) {\n        exit(-5);\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    Test4();\n    Test5();\n    Test6();\n    Test7();\n    Test8();\n    Test9();\n    Test10();\n    return 0;\n}',1,256000),
(10,'合并两个有序数组','easy','给定两个非递减顺序排列的整数数组nums1和nums2，合并nums2到nums1中，使nums1成为一个有序数组\nnums1有足够的空间容纳nums2的元素\n\n输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n输出：[1,2,2,3,5,6]\n输入：nums1 = [1], m = 1, nums2 = [], n = 0\n输出：[1]','#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    void Merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {\n\n        \n    }\n};','#ifndef COMPILER_ONLINE\n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    vector<int> nums1 = {1,2,3,0,0,0};\n    vector<int> nums2 = {2,5,6};\n    Solution().Merge(nums1, 3, nums2, 3);\n    if (nums1 == vector<int>{1,2,2,3,5,6}) {\n        std::cout << \"通过用例1通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试1不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test2() {\n    vector<int> nums1 = {1};\n    vector<int> nums2 = {};\n    Solution().Merge(nums1, 1, nums2, 0);\n    if (nums1 == vector<int>{1}) {\n        std::cout << \"通过用例2通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试2不通过 ...Failed!\" << std::endl;\n    }\n}\n\nvoid Test3() {\n    vector<int> nums1 = {0};\n    vector<int> nums2 = {1};\n    Solution().Merge(nums1, 0, nums2, 1);\n    if (nums1 == vector<int>{1}) {\n        std::cout << \"通过用例3通过 ...OK!\" << std::endl;\n    } else {\n        std::cout << \"测试3不通过 ...Failed!\" << std::endl;\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    \n}','#ifndef COMPILER_ONLINE \n\n#include \"header.cpp\"\n\n#endif\n\nvoid Test1() {\n    vector<int> nums1 = {1,2,3,0,0,0};\n    vector<int> nums2 = {2,5,6};\n    Solution().Merge(nums1, 3, nums2, 3);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2,2,3,5,6}) {\n        exit(-5);\n    }\n}\n\nvoid Test2() {\n    vector<int> nums1 = {1};\n    vector<int> nums2 = {};\n    Solution().Merge(nums1, 1, nums2, 0);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1}) {\n        exit(-5);\n    }\n}\n\nvoid Test3() {\n    vector<int> nums1 = {0};\n    vector<int> nums2 = {1};\n    Solution().Merge(nums1, 0, nums2, 1);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1}) {\n        exit(-5);\n    }\n}\n\nvoid Test4() {\n    vector<int> nums1 = {4,5,6,0,0,0};\n    vector<int> nums2 = {1,2,3};\n    Solution().Merge(nums1, 3, nums2, 3);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2,3,4,5,6}) {\n        exit(-5);\n    }\n}\n\nvoid Test5() {\n    vector<int> nums1 = {1,3,5,0,0,0};\n    vector<int> nums2 = {2,4,6};\n    Solution().Merge(nums1, 3, nums2, 3);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2,3,4,5,6}) {\n        exit(-5);\n    }\n}\n\nvoid Test6() {\n    vector<int> nums1 = {2,0};\n    vector<int> nums2 = {1};\n    Solution().Merge(nums1, 1, nums2, 1);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2}) {\n        exit(-5);\n    }\n}\n\nvoid Test7() {\n    vector<int> nums1 = {0,0,0};\n    vector<int> nums2 = {1,2,3};\n    Solution().Merge(nums1, 0, nums2, 3);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2,3}) {\n        exit(-5);\n    }\n}\n\nvoid Test8() {\n    vector<int> nums1 = {1,2,4,5,6,0};\n    vector<int> nums2 = {3};\n    Solution().Merge(nums1, 5, nums2, 1);\n    for (int num : nums1) std::cout << num << \" \";\n    std::cout << std::endl;\n\n    if (nums1 != vector<int>{1,2,3,4,5,6}) {\n        exit(-5);\n    }\n}\n\nint main() {\n    Test1();\n    Test2();\n    Test3();\n    Test4();\n    Test5();\n    Test6();\n    Test7();\n    Test8();\n    return 0;\n}',1,256000);
/*!40000 ALTER TABLE `oj_questios` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-10-11 15:43:03
